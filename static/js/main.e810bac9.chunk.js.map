{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","lineFormats","operations","useState","input","setInput","selectedFormat","setSelectedFormat","selectedOperation","setSelectedOperation","split","map","line","trim","filter","_","isEmpty","match","exec","parseInt","groups","hours","minutes","seconds","reduce","previousValue","currentValue","prevHours","prevMinutes","prevSeconds","totalSeconds","Math","floor","resultHours","resultMinutes","resultSeconds","result","Shell","variant","display","gridTemplateColumns","gridGap","p","width","value","onChange","event","target","operation","format","multiline","rows","params","justifyItems","maxWidth","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e810bac9.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Box, MenuItem, Select, TextField, Typography} from \"@material-ui/core/index\";\nimport _ from \"lodash\";\n\nexport default function App() {\n    const lineFormats = [\"1h30m4s\"]\n    const operations = [\"Sum\"]\n\n    const [input, setInput] = useState(\"\")\n    const [selectedFormat, setSelectedFormat] = useState(lineFormats[0])\n    const [selectedOperation, setSelectedOperation] = useState(operations[0])\n\n    const [resultHours, resultMinutes, resultSeconds] = input.split(\"\\n\")\n        .map(line => line.trim())\n        .filter(line => !_.isEmpty(line))\n        .map(line => {\n            const regex = /^((?<hours>\\d+)h)?((?<minutes>\\d+)m)?((?<seconds>\\d+)m)?$/g;\n            const match = regex.exec(line);\n            const hours = parseInt(match?.groups?.hours || \"0\");\n            const minutes = parseInt(match?.groups?.minutes || \"0\");\n            const seconds = parseInt(match?.groups?.seconds || \"0\");\n            return [hours, minutes, seconds]\n        })\n        .reduce((previousValue, currentValue) => {\n            const [prevHours, prevMinutes, prevSeconds] = previousValue\n            const [currHours, currMinutes, currSeconds] = currentValue\n            const totalSeconds = prevHours * 3600 + currHours * 3600 + prevMinutes * 60 + currMinutes * 60 + prevSeconds + currSeconds\n            const resultHours = Math.floor(totalSeconds / 3600)\n            const resultMinutes = Math.floor(totalSeconds / 60 % 60)\n            const resultSeconds = Math.floor(totalSeconds % 60)\n            return [resultHours, resultMinutes, resultSeconds]\n        }, [0, 0, 0])\n\n    const result = `${resultHours}h${resultMinutes}m${resultSeconds}s`\n\n    return <Shell>\n        <Typography variant={\"h2\"}>Time Calculator</Typography>\n        <Box\n            display={\"grid\"}\n            gridTemplateColumns={\"auto\"}\n            gridGap={\"16px\"}\n            p={\"32px\"}\n            width={\"100%\"}\n        >\n            <Typography variant={\"h4\"}>Operation</Typography>\n            <Select\n                variant={\"filled\"}\n                value={selectedOperation}\n                onChange={event => setSelectedOperation(event.target.value as string)}\n            >\n                {operations.map(operation =>\n                    <MenuItem key={operation} value={operation}>{operation}</MenuItem>\n                )}\n            </Select>\n            <Typography variant={\"h4\"}>Line Format</Typography>\n            <Select\n                variant={\"filled\"}\n                value={selectedFormat}\n                onChange={event => setSelectedFormat(event.target.value as string)}\n            >\n                {lineFormats.map(format =>\n                    <MenuItem key={format} value={format}>{format}</MenuItem>\n                )}\n            </Select>\n            <Typography variant={\"h4\"}>Input</Typography>\n            <TextField\n                variant={\"filled\"}\n                multiline={true}\n                rows={10}\n                value={input}\n                onChange={event => setInput(event.target.value as string)}\n            />\n            <Typography variant={\"h4\"}>Result</Typography>\n            <TextField\n                variant={\"filled\"}\n                value={result}\n            />\n        </Box>\n    </Shell>\n}\n\nfunction Shell(params: { children: any }) {\n    return <Box\n        display={\"grid\"}\n        justifyItems={\"center\"}\n        width={\"100%\"}\n    >\n        <Box\n            display={\"grid\"}\n            justifyItems={\"center\"}\n            p={\"32px\"}\n            width={\"calc(100% - 32px)\"}\n            maxWidth={\"960px\"}\n        >\n            {params.children}\n        </Box>\n    </Box>\n}\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}